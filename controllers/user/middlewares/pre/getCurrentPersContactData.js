'use strict';

/**
 * The middleware get the current persona user's contact data of the logged user; the data are
 * retrieved from the database using the user's id and the current persona's id.
 *
 * The middleware is an hybrid function so it can be used to get the result generated to it
 * rather than attaching them to req.processed or sending an error response on error;  to call
 * in this mode the third argument must be non-anonymous function with name 'callback'.
 *
 * Pre-conditions:
 *    # req.session must exist
 *    # user has been authenticated
 *
 */

var settings = require('../../../../settings');

/**
 * Dependencies
 */
//Controller helpers
var isThereAnyErrorHelper = require(settings.ctrlsPath + '/_helpers').global.isThereAnyError;
var helperPreMiddlewares = require(settings.ctrlsPath + '/_helpers').middlewares.pre;

//Services
var iWASession = require(settings.servicesPath + '/iwazat/session');

//System Entities
var iWAErrors = require(settings.sysPath + '/entities/errors');

// Database (MongoDB)
var ObjectId = require('mongoose').Types.ObjectId;
var iWAMongo = require(settings.dataSourcesPath + '/iwaMongo');
var iWAUser = require(settings.modelsPath + '/iwazat/user');

/**
 * Globals
 */
// Logger
var globalLogger = settings.logger;
// Models
var UserModel;


//Initialize the non straight away global variables
(function initialize() {

	UserModel = iWAMongo.model(iWAUser);

}());

module.exports = function (req, res, nextOrCb) {

	if ('callback' === nextOrCb.name) {
		if (isThereAnyErrorHelper(req)) {
			nextOrCb(new iWAErrors.ServerApp('The request holds error generated by some middleware ' +
				'previously called'));
			return;
		}
	} else {
		if (helperPreMiddlewares.jumpIfErrors(req, res, nextOrCb)) {
			return;
		}
	}

	var authUser = iWASession.getAuthUser(req.session);

	UserModel.getUserPersona(
		authUser.id,
		authUser.persona.id,
		['avatars', 'emails', 'telephone_nums', 'social_network_accounts'],
		['nickname', 'name', 'surname', 'avatar', 'bio', 'location', 'emails', 'show_emails',
			'telephone_nums', 'im_accounts', 'website', 'social_network_accounts'],
		function (err, userDoc) {
			var iwaErr;

			if (err) {

				iwaErr = new iWAErrors.Db('Controller: user # ' +
					'Pre-Middleware: getCurrentPersContactData | Error when trying to get the info of the ' +
					'user with the id ' + authUser.id, 520, err);

				if ('callback' === nextOrCb.name) {
					nextOrCb(iwaErr);
				} else {
					helperPreMiddlewares.traceErrors(req, iwaErr);
					helperPreMiddlewares.sendRespOfIssue(req, res, 500, 'authenticated user');
				}

				return;
			}

			// it doesn't check if the user exists and he has a persona under the specified id, because
			// the data come from a reliable source (session), to increase the performance

			if ('callback' === nextOrCb.name) {
				nextOrCb(null, userDoc);
			} else {
				helperPreMiddlewares.addProcessedData(req, 'user.contactData', userDoc, true);
				nextOrCb();
			}
		});
};